
interface SpawnOrder {
    id: string, // role + count
    scheduleTick?: number,
    spawnTime: number,
    body: BodyPartConstant[],
    memory: CreepMemory,
}

interface SourceDetails {
    /** Position of source, packed. */
    packedPos: number
    /** Open positions around the source. */
    posCount: number
    /** Distance from the homeRoom's POI to the source. */
    dist?: number
    /** Carry parts required to fully transport the energy generated by the source. */
    carryReq?: number
}

interface RemoteDetails {
    [sourceId: Id<Source>]: SourceDetails,
    assignedHarvIds: Id<Creep>[],
    assignedTruckerIds: Id<Creep>[],
    assignedEngIds: Id<Creep>[],
}

/** The form an inventory transfer request for the anchor should take.
 * @param supplyId the ID of the supply
 * @param targetId The ID of the destination structure. Must be a store structure.
 * @param resource The resource constant of the resource being moved.
 * @param qty The quantity to move.
 * */
interface AnchorRequest {
    supplyId?: Id<AnyStoreStructure>
    targetId: Id<AnyStoreStructure>
    resource: ResourceConstant
    qty?: number
}

/** The form a market request should take.
 * @param action "buy" or "sell". Are we buying or selling?
 * @param resource The resource constant of the resource being purchased / sold.
 * @param quantity The quantity to purchase / sold.
 * @param active Optional boolean defining if the terminal should have space for the request or not. Used by the Market Manager. Do not set when making a request.
*/
interface MarketRequest {
    action: "buy" | "sell"
    resource: ResourceConstant
    quantity: number
    active?: boolean
}

/** The object Terminal.fetchPrice() returns. */
interface MarketPrice {
    price: number,
    std: number
}
